
LCD Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00000260  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cbd  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000823  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000785  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  00002204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000657  00000000  00000000  00002650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e6       	ldi	r30, 0x60	; 96
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 17 01 	call	0x22e	; 0x22e <main>
  7a:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	93 9a       	sbi	0x12, 3	; 18
  84:	00 c0       	rjmp	.+0      	; 0x86 <toggle_e+0x4>
  86:	93 98       	cbi	0x12, 3	; 18
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	c8 2f       	mov	r28, r24
  8e:	66 23       	and	r22, r22
  90:	11 f0       	breq	.+4      	; 0x96 <lcd_write+0xc>
  92:	a8 9a       	sbi	0x15, 0	; 21
  94:	01 c0       	rjmp	.+2      	; 0x98 <lcd_write+0xe>
  96:	a8 98       	cbi	0x15, 0	; 21
  98:	92 98       	cbi	0x12, 2	; 18
  9a:	8c 9a       	sbi	0x11, 4	; 17
  9c:	8d 9a       	sbi	0x11, 5	; 17
  9e:	8e 9a       	sbi	0x11, 6	; 17
  a0:	8f 9a       	sbi	0x11, 7	; 17
  a2:	97 98       	cbi	0x12, 7	; 18
  a4:	96 98       	cbi	0x12, 6	; 18
  a6:	95 98       	cbi	0x12, 5	; 18
  a8:	94 98       	cbi	0x12, 4	; 18
  aa:	cc 23       	and	r28, r28
  ac:	0c f4       	brge	.+2      	; 0xb0 <lcd_write+0x26>
  ae:	97 9a       	sbi	0x12, 7	; 18
  b0:	c6 fd       	sbrc	r28, 6
  b2:	96 9a       	sbi	0x12, 6	; 18
  b4:	c5 fd       	sbrc	r28, 5
  b6:	95 9a       	sbi	0x12, 5	; 18
  b8:	c4 fd       	sbrc	r28, 4
  ba:	94 9a       	sbi	0x12, 4	; 18
  bc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  c0:	97 98       	cbi	0x12, 7	; 18
  c2:	96 98       	cbi	0x12, 6	; 18
  c4:	95 98       	cbi	0x12, 5	; 18
  c6:	94 98       	cbi	0x12, 4	; 18
  c8:	c3 fd       	sbrc	r28, 3
  ca:	97 9a       	sbi	0x12, 7	; 18
  cc:	c2 fd       	sbrc	r28, 2
  ce:	96 9a       	sbi	0x12, 6	; 18
  d0:	c1 fd       	sbrc	r28, 1
  d2:	95 9a       	sbi	0x12, 5	; 18
  d4:	c0 fd       	sbrc	r28, 0
  d6:	94 9a       	sbi	0x12, 4	; 18
  d8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  dc:	94 9a       	sbi	0x12, 4	; 18
  de:	95 9a       	sbi	0x12, 5	; 18
  e0:	96 9a       	sbi	0x12, 6	; 18
  e2:	97 9a       	sbi	0x12, 7	; 18
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <lcd_read>:
  e8:	88 23       	and	r24, r24
  ea:	11 f0       	breq	.+4      	; 0xf0 <lcd_read+0x8>
  ec:	a8 9a       	sbi	0x15, 0	; 21
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <lcd_read+0xa>
  f0:	a8 98       	cbi	0x15, 0	; 21
  f2:	92 9a       	sbi	0x12, 2	; 18
  f4:	8c 98       	cbi	0x11, 4	; 17
  f6:	8d 98       	cbi	0x11, 5	; 17
  f8:	8e 98       	cbi	0x11, 6	; 17
  fa:	8f 98       	cbi	0x11, 7	; 17
  fc:	93 9a       	sbi	0x12, 3	; 18
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x18>
 100:	84 9b       	sbis	0x10, 4	; 16
 102:	02 c0       	rjmp	.+4      	; 0x108 <lcd_read+0x20>
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	01 c0       	rjmp	.+2      	; 0x10a <lcd_read+0x22>
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	85 99       	sbic	0x10, 5	; 16
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	86 99       	sbic	0x10, 6	; 16
 110:	80 64       	ori	r24, 0x40	; 64
 112:	87 99       	sbic	0x10, 7	; 16
 114:	80 68       	ori	r24, 0x80	; 128
 116:	93 98       	cbi	0x12, 3	; 18
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_read+0x32>
 11a:	93 9a       	sbi	0x12, 3	; 18
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_read+0x36>
 11e:	84 99       	sbic	0x10, 4	; 16
 120:	81 60       	ori	r24, 0x01	; 1
 122:	85 99       	sbic	0x10, 5	; 16
 124:	82 60       	ori	r24, 0x02	; 2
 126:	86 99       	sbic	0x10, 6	; 16
 128:	84 60       	ori	r24, 0x04	; 4
 12a:	87 99       	sbic	0x10, 7	; 16
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	93 98       	cbi	0x12, 3	; 18
 130:	08 95       	ret

00000132 <lcd_waitbusy>:
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 138:	88 23       	and	r24, r24
 13a:	dc f3       	brlt	.-10     	; 0x132 <lcd_waitbusy>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_waitbusy+0xc>
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_read>
 144:	08 95       	ret

00000146 <lcd_command>:
 146:	cf 93       	push	r28
 148:	c8 2f       	mov	r28, r24
 14a:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 14e:	60 e0       	ldi	r22, 0x00	; 0
 150:	8c 2f       	mov	r24, r28
 152:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 156:	cf 91       	pop	r28
 158:	08 95       	ret

0000015a <lcd_clrscr>:
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 160:	08 95       	ret

00000162 <lcd_putc>:
 162:	cf 93       	push	r28
 164:	c8 2f       	mov	r28, r24
 166:	0e 94 99 00 	call	0x132	; 0x132 <lcd_waitbusy>
 16a:	ca 30       	cpi	r28, 0x0A	; 10
 16c:	49 f4       	brne	.+18     	; 0x180 <lcd_putc+0x1e>
 16e:	80 34       	cpi	r24, 0x40	; 64
 170:	10 f0       	brcs	.+4      	; 0x176 <lcd_putc+0x14>
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	01 c0       	rjmp	.+2      	; 0x178 <lcd_putc+0x16>
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	80 58       	subi	r24, 0x80	; 128
 17a:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
 17e:	04 c0       	rjmp	.+8      	; 0x188 <lcd_putc+0x26>
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8c 2f       	mov	r24, r28
 184:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 194:	a0 9a       	sbi	0x14, 0	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 196:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 198:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 19a:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 19c:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 19e:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 1a0:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1a2:	80 ea       	ldi	r24, 0xA0	; 160
 1a4:	9f e0       	ldi	r25, 0x0F	; 15
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1aa:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1ac:	94 9a       	sbi	0x12, 4	; 18
    lcd_e_toggle();
 1ae:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b2:	80 ee       	ldi	r24, 0xE0	; 224
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1be:	c0 e1       	ldi	r28, 0x10	; 16
 1c0:	d0 e0       	ldi	r29, 0x00	; 0
 1c2:	ce 01       	movw	r24, r28
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1c8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1d2:	94 98       	cbi	0x12, 4	; 18
    lcd_e_toggle();
 1d4:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1d8:	21 97       	sbiw	r28, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1dc:	88 e2       	ldi	r24, 0x28	; 40
 1de:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1e8:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1ec:	86 e0       	ldi	r24, 0x06	; 6
 1ee:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1f2:	81 2f       	mov	r24, r17
 1f4:	0e 94 a3 00 	call	0x146	; 0x146 <lcd_command>

}/* lcd_init */
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	08 95       	ret

00000200 <show_animated_message>:

#include <avr/io.h>
#include "lcd.h"
#include <avr/delay.h>

void show_animated_message(char* message){
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ec 01       	movw	r28, r24
	lcd_clrscr();
 206:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_clrscr>
	for (int i = 0; message[i] != '\0'; i++)
 20a:	88 81       	ld	r24, Y
 20c:	88 23       	and	r24, r24
 20e:	61 f0       	breq	.+24     	; 0x228 <show_animated_message+0x28>
 210:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_putc(message[i]);
 212:	0e 94 b1 00 	call	0x162	; 0x162 <lcd_putc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	8f e0       	ldi	r24, 0x0F	; 15
 218:	97 e2       	ldi	r25, 0x27	; 39
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <show_animated_message+0x1a>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <show_animated_message+0x20>
 220:	00 00       	nop
#include "lcd.h"
#include <avr/delay.h>

void show_animated_message(char* message){
	lcd_clrscr();
	for (int i = 0; message[i] != '\0'; i++)
 222:	89 91       	ld	r24, Y+
 224:	81 11       	cpse	r24, r1
 226:	f5 cf       	rjmp	.-22     	; 0x212 <show_animated_message+0x12>
	{
		lcd_putc(message[i]);
		_delay_ms(40);
	}
}
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <main>:

int main(void)
{
    lcd_init(LCD_DISP_ON);
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	0e 94 c6 00 	call	0x18c	; 0x18c <lcd_init>
	show_animated_message(" ** Welcome **");
 234:	80 e6       	ldi	r24, 0x60	; 96
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 00 01 	call	0x200	; 0x200 <show_animated_message>
 23c:	2f e7       	ldi	r18, 0x7F	; 127
 23e:	8a e1       	ldi	r24, 0x1A	; 26
 240:	96 e0       	ldi	r25, 0x06	; 6
 242:	21 50       	subi	r18, 0x01	; 1
 244:	80 40       	sbci	r24, 0x00	; 0
 246:	90 40       	sbci	r25, 0x00	; 0
 248:	e1 f7       	brne	.-8      	; 0x242 <main+0x14>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <main+0x1e>
 24c:	00 00       	nop
	_delay_ms(2000);
	show_animated_message("** Automated **\n** Cup Washer **");
 24e:	8f e6       	ldi	r24, 0x6F	; 111
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 00 01 	call	0x200	; 0x200 <show_animated_message>
}
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>

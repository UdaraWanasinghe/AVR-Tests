
Stepper Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008c6  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064f  00000000  00000000  00000b16  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bf  00000000  00000000  00001165  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001524  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a9  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001bbf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "stepper.h"
#include <avr/delay.h>

int main(void)
{
    stepper_init();
  6c:	0e 94 97 00 	call	0x12e	; 0x12e <stepper_init>
	step_motor(90, STEPPER_CLOCKWISE);
  70:	61 e0       	ldi	r22, 0x01	; 1
  72:	70 e0       	ldi	r23, 0x00	; 0
  74:	8a e5       	ldi	r24, 0x5A	; 90
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	0e 94 43 00 	call	0x86	; 0x86 <step_motor>
	stop_motor();
  7c:	0e 94 93 00 	call	0x126	; 0x126 <stop_motor>
}
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	08 95       	ret

00000086 <step_motor>:
	STEPPER_DDR |= (1 << STEPPER_PIN0) | (1 << STEPPER_PIN1) | (1 << STEPPER_PIN2) | (1 << STEPPER_PIN3);
	//stop stepper motor
	stop_motor();
}

void step_motor(int nSteps, int direction){
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
	for (int i = 0; i < nSteps; i++)
  8a:	18 16       	cp	r1, r24
  8c:	19 06       	cpc	r1, r25
  8e:	0c f0       	brlt	.+2      	; 0x92 <step_motor+0xc>
  90:	47 c0       	rjmp	.+142    	; 0x120 <step_motor+0x9a>
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
	{
		
		STEPPER_PORT = 0b00110000;
  96:	b0 e3       	ldi	r27, 0x30	; 48
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b00100000;
  98:	a0 e2       	ldi	r26, 0x20	; 32
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b01100000;
  9a:	f0 e6       	ldi	r31, 0x60	; 96
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b01000000;
  9c:	e0 e4       	ldi	r30, 0x40	; 64
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b11000000;
  9e:	70 ec       	ldi	r23, 0xC0	; 192
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b10000000;
  a0:	60 e8       	ldi	r22, 0x80	; 128
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b10010000;
  a2:	50 e9       	ldi	r21, 0x90	; 144
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b00010000;
  a4:	40 e1       	ldi	r20, 0x10	; 16

void step_motor(int nSteps, int direction){
	for (int i = 0; i < nSteps; i++)
	{
		
		STEPPER_PORT = 0b00110000;
  a6:	bb bb       	out	0x1b, r27	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	c7 e8       	ldi	r28, 0x87	; 135
  aa:	d3 e1       	ldi	r29, 0x13	; 19
  ac:	21 97       	sbiw	r28, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <step_motor+0x26>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <step_motor+0x2c>
  b2:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b00100000;
  b4:	ab bb       	out	0x1b, r26	; 27
  b6:	c7 e8       	ldi	r28, 0x87	; 135
  b8:	d3 e1       	ldi	r29, 0x13	; 19
  ba:	21 97       	sbiw	r28, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <step_motor+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <step_motor+0x3a>
  c0:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b01100000;
  c2:	fb bb       	out	0x1b, r31	; 27
  c4:	c7 e8       	ldi	r28, 0x87	; 135
  c6:	d3 e1       	ldi	r29, 0x13	; 19
  c8:	21 97       	sbiw	r28, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <step_motor+0x42>
  cc:	00 c0       	rjmp	.+0      	; 0xce <step_motor+0x48>
  ce:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b01000000;
  d0:	eb bb       	out	0x1b, r30	; 27
  d2:	c7 e8       	ldi	r28, 0x87	; 135
  d4:	d3 e1       	ldi	r29, 0x13	; 19
  d6:	21 97       	sbiw	r28, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <step_motor+0x50>
  da:	00 c0       	rjmp	.+0      	; 0xdc <step_motor+0x56>
  dc:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b11000000;
  de:	7b bb       	out	0x1b, r23	; 27
  e0:	c7 e8       	ldi	r28, 0x87	; 135
  e2:	d3 e1       	ldi	r29, 0x13	; 19
  e4:	21 97       	sbiw	r28, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <step_motor+0x5e>
  e8:	00 c0       	rjmp	.+0      	; 0xea <step_motor+0x64>
  ea:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b10000000;
  ec:	6b bb       	out	0x1b, r22	; 27
  ee:	c7 e8       	ldi	r28, 0x87	; 135
  f0:	d3 e1       	ldi	r29, 0x13	; 19
  f2:	21 97       	sbiw	r28, 0x01	; 1
  f4:	f1 f7       	brne	.-4      	; 0xf2 <step_motor+0x6c>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <step_motor+0x72>
  f8:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b10010000;
  fa:	5b bb       	out	0x1b, r21	; 27
  fc:	c7 e8       	ldi	r28, 0x87	; 135
  fe:	d3 e1       	ldi	r29, 0x13	; 19
 100:	21 97       	sbiw	r28, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <step_motor+0x7a>
 104:	00 c0       	rjmp	.+0      	; 0x106 <step_motor+0x80>
 106:	00 00       	nop
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b00010000;
 108:	4b bb       	out	0x1b, r20	; 27
 10a:	c7 e8       	ldi	r28, 0x87	; 135
 10c:	d3 e1       	ldi	r29, 0x13	; 19
 10e:	21 97       	sbiw	r28, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <step_motor+0x88>
 112:	00 c0       	rjmp	.+0      	; 0x114 <step_motor+0x8e>
 114:	00 00       	nop
	//stop stepper motor
	stop_motor();
}

void step_motor(int nSteps, int direction){
	for (int i = 0; i < nSteps; i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	3f 4f       	sbci	r19, 0xFF	; 255
 11a:	82 17       	cp	r24, r18
 11c:	93 07       	cpc	r25, r19
 11e:	19 f6       	brne	.-122    	; 0xa6 <step_motor+0x20>
		STEPPER_PORT = 0b10010000;
		_delay_ms(STEP_DELAY);
		STEPPER_PORT = 0b00010000;
		_delay_ms(STEP_DELAY);
	}
}
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <stop_motor>:
	
void stop_motor(){
	//set stepper pins all 0
	STEPPER_PORT &= ~((1 << STEPPER_PIN0) | (1 << STEPPER_PIN1) | (1 << STEPPER_PIN2) | (1 << STEPPER_PIN3));
 126:	8b b3       	in	r24, 0x1b	; 27
 128:	8f 70       	andi	r24, 0x0F	; 15
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	08 95       	ret

0000012e <stepper_init>:

#include "stepper.h"

void stepper_init(){
	//set stepper pins as output
	STEPPER_DDR |= (1 << STEPPER_PIN0) | (1 << STEPPER_PIN1) | (1 << STEPPER_PIN2) | (1 << STEPPER_PIN3);
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	80 6f       	ori	r24, 0xF0	; 240
 132:	8a bb       	out	0x1a, r24	; 26
	//stop stepper motor
	stop_motor();
 134:	0e 94 93 00 	call	0x126	; 0x126 <stop_motor>
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>

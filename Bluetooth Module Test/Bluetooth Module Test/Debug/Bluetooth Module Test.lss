
Bluetooth Module Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000344  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000050  00800060  00000344  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  00000474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ea6  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000085d  00000000  00000000  000013fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000856  00000000  00000000  00001c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  000024b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000452  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000061e  00000000  00000000  00002ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000030e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e4       	ldi	r30, 0x44	; 68
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3b       	cpi	r26, 0xB0	; 176
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  7a:	0c 94 a0 01 	jmp	0x340	; 0x340 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <bluetooth_init>:
#include "bluetooth.h"
#include <avr/io.h>

// function to initialize UART communication
void bluetooth_init (){
	UBRRH |= (12 >> 8);										// set UBBR value for 9600 baud rate
  82:	80 b5       	in	r24, 0x20	; 32
  84:	80 bd       	out	0x20, r24	; 32
	UBRRL |= 12;
  86:	89 b1       	in	r24, 0x09	; 9
  88:	8c 60       	ori	r24, 0x0C	; 12
  8a:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << TXEN) | (1 << RXEN);						// enable receiver and transmitter
  8c:	8a b1       	in	r24, 0x0a	; 10
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	8a b9       	out	0x0a, r24	; 10
	UCSRC &= ~(1 << UMSEL);									// enable asynchronous mode
  92:	80 b5       	in	r24, 0x20	; 32
  94:	8f 7b       	andi	r24, 0xBF	; 191
  96:	80 bd       	out	0x20, r24	; 32
	UCSRC|= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);		// 8bit data format
  98:	80 b5       	in	r24, 0x20	; 32
  9a:	86 68       	ori	r24, 0x86	; 134
  9c:	80 bd       	out	0x20, r24	; 32
	UCSRA = 1 << U2X;										// double speed mode
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	8b b9       	out	0x0b, r24	; 11
  a2:	08 95       	ret

000000a4 <bluetooth_transmitc>:
}

// function to transmit character
void bluetooth_transmitc (char c)
{
	while (!( UCSRA & (1<<UDRE)));                // wait while register is free
  a4:	5d 9b       	sbis	0x0b, 5	; 11
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <bluetooth_transmitc>
	UDR = c;                                   // load data in the register
  a8:	8c b9       	out	0x0c, r24	; 12
  aa:	08 95       	ret

000000ac <bluetooth_transmits>:
}

// function to transmit string
void bluetooth_transmits (char *str)
{
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	ec 01       	movw	r28, r24
	int i;
	for (i = 0; ;i++)
	{
		if (str[i] == '\0') break;
  b2:	88 81       	ld	r24, Y
  b4:	88 23       	and	r24, r24
  b6:	31 f0       	breq	.+12     	; 0xc4 <bluetooth_transmits+0x18>
  b8:	21 96       	adiw	r28, 0x01	; 1
		bluetooth_transmitc(str[i]);	// load data in the register
  ba:	0e 94 52 00 	call	0xa4	; 0xa4 <bluetooth_transmitc>
void bluetooth_transmits (char *str)
{
	int i;
	for (i = 0; ;i++)
	{
		if (str[i] == '\0') break;
  be:	89 91       	ld	r24, Y+
  c0:	81 11       	cpse	r24, r1
  c2:	fb cf       	rjmp	.-10     	; 0xba <bluetooth_transmits+0xe>
		bluetooth_transmitc(str[i]);	// load data in the register
	}
}
  c4:	df 91       	pop	r29
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <bluetooth_receivec>:

// function to receive character
char bluetooth_receivec ()
{
	while(!(UCSRA) & (1<<RXC));                   // wait while data is being received
  ca:	8b b1       	in	r24, 0x0b	; 11
	return UDR;                                   // return 8-bit data
  cc:	8c b1       	in	r24, 0x0c	; 12
  ce:	08 95       	ret

000000d0 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  d0:	93 9a       	sbi	0x12, 3	; 18
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <toggle_e+0x4>
  d4:	93 98       	cbi	0x12, 3	; 18
  d6:	08 95       	ret

000000d8 <lcd_write>:
  d8:	cf 93       	push	r28
  da:	c8 2f       	mov	r28, r24
  dc:	66 23       	and	r22, r22
  de:	11 f0       	breq	.+4      	; 0xe4 <lcd_write+0xc>
  e0:	a8 9a       	sbi	0x15, 0	; 21
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <lcd_write+0xe>
  e4:	a8 98       	cbi	0x15, 0	; 21
  e6:	92 98       	cbi	0x12, 2	; 18
  e8:	8c 9a       	sbi	0x11, 4	; 17
  ea:	8d 9a       	sbi	0x11, 5	; 17
  ec:	8e 9a       	sbi	0x11, 6	; 17
  ee:	8f 9a       	sbi	0x11, 7	; 17
  f0:	97 98       	cbi	0x12, 7	; 18
  f2:	96 98       	cbi	0x12, 6	; 18
  f4:	95 98       	cbi	0x12, 5	; 18
  f6:	94 98       	cbi	0x12, 4	; 18
  f8:	cc 23       	and	r28, r28
  fa:	0c f4       	brge	.+2      	; 0xfe <lcd_write+0x26>
  fc:	97 9a       	sbi	0x12, 7	; 18
  fe:	c6 fd       	sbrc	r28, 6
 100:	96 9a       	sbi	0x12, 6	; 18
 102:	c5 fd       	sbrc	r28, 5
 104:	95 9a       	sbi	0x12, 5	; 18
 106:	c4 fd       	sbrc	r28, 4
 108:	94 9a       	sbi	0x12, 4	; 18
 10a:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
 10e:	97 98       	cbi	0x12, 7	; 18
 110:	96 98       	cbi	0x12, 6	; 18
 112:	95 98       	cbi	0x12, 5	; 18
 114:	94 98       	cbi	0x12, 4	; 18
 116:	c3 fd       	sbrc	r28, 3
 118:	97 9a       	sbi	0x12, 7	; 18
 11a:	c2 fd       	sbrc	r28, 2
 11c:	96 9a       	sbi	0x12, 6	; 18
 11e:	c1 fd       	sbrc	r28, 1
 120:	95 9a       	sbi	0x12, 5	; 18
 122:	c0 fd       	sbrc	r28, 0
 124:	94 9a       	sbi	0x12, 4	; 18
 126:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
 12a:	94 9a       	sbi	0x12, 4	; 18
 12c:	95 9a       	sbi	0x12, 5	; 18
 12e:	96 9a       	sbi	0x12, 6	; 18
 130:	97 9a       	sbi	0x12, 7	; 18
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <lcd_read>:
 136:	88 23       	and	r24, r24
 138:	11 f0       	breq	.+4      	; 0x13e <lcd_read+0x8>
 13a:	a8 9a       	sbi	0x15, 0	; 21
 13c:	01 c0       	rjmp	.+2      	; 0x140 <lcd_read+0xa>
 13e:	a8 98       	cbi	0x15, 0	; 21
 140:	92 9a       	sbi	0x12, 2	; 18
 142:	8c 98       	cbi	0x11, 4	; 17
 144:	8d 98       	cbi	0x11, 5	; 17
 146:	8e 98       	cbi	0x11, 6	; 17
 148:	8f 98       	cbi	0x11, 7	; 17
 14a:	93 9a       	sbi	0x12, 3	; 18
 14c:	00 c0       	rjmp	.+0      	; 0x14e <lcd_read+0x18>
 14e:	84 9b       	sbis	0x10, 4	; 16
 150:	02 c0       	rjmp	.+4      	; 0x156 <lcd_read+0x20>
 152:	80 e1       	ldi	r24, 0x10	; 16
 154:	01 c0       	rjmp	.+2      	; 0x158 <lcd_read+0x22>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	85 99       	sbic	0x10, 5	; 16
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	86 99       	sbic	0x10, 6	; 16
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	87 99       	sbic	0x10, 7	; 16
 162:	80 68       	ori	r24, 0x80	; 128
 164:	93 98       	cbi	0x12, 3	; 18
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_read+0x32>
 168:	93 9a       	sbi	0x12, 3	; 18
 16a:	00 c0       	rjmp	.+0      	; 0x16c <lcd_read+0x36>
 16c:	84 99       	sbic	0x10, 4	; 16
 16e:	81 60       	ori	r24, 0x01	; 1
 170:	85 99       	sbic	0x10, 5	; 16
 172:	82 60       	ori	r24, 0x02	; 2
 174:	86 99       	sbic	0x10, 6	; 16
 176:	84 60       	ori	r24, 0x04	; 4
 178:	87 99       	sbic	0x10, 7	; 16
 17a:	88 60       	ori	r24, 0x08	; 8
 17c:	93 98       	cbi	0x12, 3	; 18
 17e:	08 95       	ret

00000180 <lcd_waitbusy>:
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
 186:	88 23       	and	r24, r24
 188:	dc f3       	brlt	.-10     	; 0x180 <lcd_waitbusy>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_waitbusy+0xc>
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_read>
 192:	08 95       	ret

00000194 <lcd_command>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	8c 2f       	mov	r24, r28
 1a0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <lcd_clrscr>:
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>
 1ae:	08 95       	ret

000001b0 <lcd_putc>:
 1b0:	cf 93       	push	r28
 1b2:	c8 2f       	mov	r28, r24
 1b4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1b8:	ca 30       	cpi	r28, 0x0A	; 10
 1ba:	49 f4       	brne	.+18     	; 0x1ce <lcd_putc+0x1e>
 1bc:	80 34       	cpi	r24, 0x40	; 64
 1be:	10 f0       	brcs	.+4      	; 0x1c4 <lcd_putc+0x14>
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <lcd_putc+0x16>
 1c4:	80 e4       	ldi	r24, 0x40	; 64
 1c6:	80 58       	subi	r24, 0x80	; 128
 1c8:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>
 1cc:	13 c0       	rjmp	.+38     	; 0x1f4 <lcd_putc+0x44>
 1ce:	80 31       	cpi	r24, 0x10	; 16
 1d0:	29 f4       	brne	.+10     	; 0x1dc <lcd_putc+0x2c>
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	80 ec       	ldi	r24, 0xC0	; 192
 1d6:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
 1da:	06 c0       	rjmp	.+12     	; 0x1e8 <lcd_putc+0x38>
 1dc:	80 35       	cpi	r24, 0x50	; 80
 1de:	21 f4       	brne	.+8      	; 0x1e8 <lcd_putc+0x38>
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	80 e8       	ldi	r24, 0x80	; 128
 1e4:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
 1e8:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_waitbusy>
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 6c 00 	call	0xd8	; 0xd8 <lcd_write>
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <lcd_puts>:
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	fc 01       	movw	r30, r24
 202:	80 81       	ld	r24, Z
 204:	88 23       	and	r24, r24
 206:	29 f0       	breq	.+10     	; 0x212 <lcd_puts+0x1a>
 208:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
 20c:	89 91       	ld	r24, Y+
 20e:	81 11       	cpse	r24, r1
 210:	fb cf       	rjmp	.-10     	; 0x208 <lcd_puts+0x10>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 220:	a0 9a       	sbi	0x14, 0	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 222:	8a 9a       	sbi	0x11, 2	; 17
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 224:	8b 9a       	sbi	0x11, 3	; 17
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 226:	8c 9a       	sbi	0x11, 4	; 17
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 228:	8d 9a       	sbi	0x11, 5	; 17
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 22a:	8e 9a       	sbi	0x11, 6	; 17
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 22c:	8f 9a       	sbi	0x11, 7	; 17
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 22e:	80 ea       	ldi	r24, 0xA0	; 160
 230:	9f e0       	ldi	r25, 0x0F	; 15
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x1a>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 236:	95 9a       	sbi	0x12, 5	; 18
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 238:	94 9a       	sbi	0x12, 4	; 18
    lcd_e_toggle();
 23a:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 23e:	80 ee       	ldi	r24, 0xE0	; 224
 240:	94 e0       	ldi	r25, 0x04	; 4
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <lcd_init+0x2a>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 246:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 24a:	c0 e1       	ldi	r28, 0x10	; 16
 24c:	d0 e0       	ldi	r29, 0x00	; 0
 24e:	ce 01       	movw	r24, r28
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <lcd_init+0x38>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 254:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 258:	ce 01       	movw	r24, r28
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 25e:	94 98       	cbi	0x12, 4	; 18
    lcd_e_toggle();
 260:	0e 94 68 00 	call	0xd0	; 0xd0 <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 264:	21 97       	sbiw	r28, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 274:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 27e:	81 2f       	mov	r24, r17
 280:	0e 94 ca 00 	call	0x194	; 0x194 <lcd_command>

}/* lcd_init */
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	08 95       	ret

0000028c <main>:
#include "bluetooth.h"
#include <avr/delay.h>

int main(void)
{
    lcd_init(LCD_DISP_ON);
 28c:	8c e0       	ldi	r24, 0x0C	; 12
 28e:	0e 94 0c 01 	call	0x218	; 0x218 <lcd_init>
	lcd_puts("Welcome");
 292:	80 e6       	ldi	r24, 0x60	; 96
 294:	90 e0       	ldi	r25, 0x00	; 0
 296:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_puts>
	
	bluetooth_init();
 29a:	0e 94 41 00 	call	0x82	; 0x82 <bluetooth_init>
	int i;
	char c;
	
	while (1)
	{
		c = bluetooth_receivec();
 29e:	0e 94 65 00 	call	0xca	; 0xca <bluetooth_receivec>
		
		if (c == 'A')
 2a2:	81 34       	cpi	r24, 0x41	; 65
 2a4:	59 f4       	brne	.+22     	; 0x2bc <main+0x30>
		{
			lcd_putc(c);
 2a6:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:A");
 2aa:	88 e6       	ldi	r24, 0x68	; 104
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:100");
 2b2:	8d e6       	ldi	r24, 0x6D	; 109
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 2ba:	f1 cf       	rjmp	.-30     	; 0x29e <main+0x12>
			
		}else if (c == 'B')
 2bc:	82 34       	cpi	r24, 0x42	; 66
 2be:	59 f4       	brne	.+22     	; 0x2d6 <main+0x4a>
		{
			lcd_putc(c);
 2c0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:B");
 2c4:	84 e7       	ldi	r24, 0x74	; 116
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:200");
 2cc:	89 e7       	ldi	r24, 0x79	; 121
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 2d4:	e4 cf       	rjmp	.-56     	; 0x29e <main+0x12>
			
		}else if (c == 'C')
 2d6:	83 34       	cpi	r24, 0x43	; 67
 2d8:	59 f4       	brne	.+22     	; 0x2f0 <main+0x64>
		{
			lcd_putc(c);
 2da:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:C");
 2de:	80 e8       	ldi	r24, 0x80	; 128
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:300");
 2e6:	85 e8       	ldi	r24, 0x85	; 133
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 2ee:	d7 cf       	rjmp	.-82     	; 0x29e <main+0x12>
		}else if (c == 'D')
 2f0:	84 34       	cpi	r24, 0x44	; 68
 2f2:	59 f4       	brne	.+22     	; 0x30a <main+0x7e>
		{
			lcd_putc(c);
 2f4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:D");
 2f8:	8c e8       	ldi	r24, 0x8C	; 140
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:400");
 300:	81 e9       	ldi	r24, 0x91	; 145
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 308:	ca cf       	rjmp	.-108    	; 0x29e <main+0x12>
		}else if (c == 'E')
 30a:	85 34       	cpi	r24, 0x45	; 69
 30c:	59 f4       	brne	.+22     	; 0x324 <main+0x98>
		{
			lcd_putc(c);
 30e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:E");
 312:	88 e9       	ldi	r24, 0x98	; 152
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:500");
 31a:	8d e9       	ldi	r24, 0x9D	; 157
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 322:	bd cf       	rjmp	.-134    	; 0x29e <main+0x12>
		}else if (c == 'F')
 324:	86 34       	cpi	r24, 0x46	; 70
 326:	09 f0       	breq	.+2      	; 0x32a <main+0x9e>
 328:	ba cf       	rjmp	.-140    	; 0x29e <main+0x12>
		{
			lcd_putc(c);
 32a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_putc>
			bluetooth_transmits("RR:F");
 32e:	84 ea       	ldi	r24, 0xA4	; 164
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
			bluetooth_transmits("LL:600");
 336:	89 ea       	ldi	r24, 0xA9	; 169
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 56 00 	call	0xac	; 0xac <bluetooth_transmits>
 33e:	af cf       	rjmp	.-162    	; 0x29e <main+0x12>

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>

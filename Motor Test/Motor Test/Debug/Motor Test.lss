
Motor Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062a  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000007ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000265  00000000  00000000  00000d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001307  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
	MCUCSR |= 1 << JTD;
  6c:	84 b7       	in	r24, 0x34	; 52
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	84 bf       	out	0x34, r24	; 52
	MCUCSR |= 1 << JTD;
  72:	84 b7       	in	r24, 0x34	; 52
  74:	80 68       	ori	r24, 0x80	; 128
  76:	84 bf       	out	0x34, r24	; 52
	DDRC  = 0xFF;
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	84 bb       	out	0x14, r24	; 20
	
	while (1)
	{
		PORTC = 0b00000010;
  7c:	92 e0       	ldi	r25, 0x02	; 2
		_delay_ms(3000);
		PORTC = 0b10000100;
  7e:	84 e8       	ldi	r24, 0x84	; 132
	MCUCSR |= 1 << JTD;
	DDRC  = 0xFF;
	
	while (1)
	{
		PORTC = 0b00000010;
  80:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f eb       	ldi	r18, 0xBF	; 191
  84:	37 e2       	ldi	r19, 0x27	; 39
  86:	49 e0       	ldi	r20, 0x09	; 9
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	30 40       	sbci	r19, 0x00	; 0
  8c:	40 40       	sbci	r20, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
		_delay_ms(3000);
		PORTC = 0b10000100;
  94:	85 bb       	out	0x15, r24	; 21
  96:	2f eb       	ldi	r18, 0xBF	; 191
  98:	37 e2       	ldi	r19, 0x27	; 39
  9a:	49 e0       	ldi	r20, 0x09	; 9
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	40 40       	sbci	r20, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
  a8:	eb cf       	rjmp	.-42     	; 0x80 <main+0x14>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
